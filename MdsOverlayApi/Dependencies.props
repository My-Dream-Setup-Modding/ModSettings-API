<Project InitialTargets="ValidateGamePath">
    <Import Project="$(MSBuildThisFileDirectory)\GameFolder.props"
            Condition="Exists('$(MSBuildThisFileDirectory)\GameFolder.props')"/>

    <Target Name="ValidateGamePath">
        <Error Text="The GameFolder property must be set to the My Dream Setup game folder."
               Condition="'$(GameFolder)' == '' or !Exists('$(GameFolder)')"/>
        <Error Text="The ModmanProfileFolder property must be set to the parent folder of your BepInEx Instance."
               Condition="'$(ModmanProfileFolder)' == '' 
			   or !Exists('$(ModmanProfileFolder)\BepInEx')"/>
    </Target>

    <!-- Path Info -->
    <PropertyGroup>
        <BIELibsFolder>$(ModmanProfileFolder)\BepInEx\core</BIELibsFolder>
        <PublicizedLibsFolder>$(ModmanProfileFolder)\BepInEx\BepInEx.AssemblyPublicizer.Publicized</PublicizedLibsFolder>
        <ManagedFolder>$(GameFolder)\MDS_Data\Managed</ManagedFolder>
        <PluginsFolder>$(ModmanProfileFolder)\BepInEx\plugins</PluginsFolder>
    </PropertyGroup>

    <!-- BepInEx libs -->
    <ItemGroup>
        <Reference Include="$(BIELibsFolder)\BepInEx*.dll" Private="false"/>
        <Reference Include="$(BIELibsFolder)\0Harmony.dll" Private="false"/>
        <Reference Include="$(BIELibsFolder)\MonoMod.RuntimeDetour.dll" Private="false"/>
    </ItemGroup>
    
    <Choose>
        <When Condition="$(PublicizeGameFiles) == 'true'">
            <ItemGroup>
                <PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.3">
                    <PrivateAssets>all</PrivateAssets>
                    <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
                </PackageReference>
                
                <Reference Include="$(ManagedFolder)\*.dll" Private="false" Publicize="true"/>
                <Reference Remove="$(ManagedFolder)\netstandard.dll"/>
            </ItemGroup>

            <PropertyGroup>
                <!--Allowing unsafe code, otherwise .NET will complain on a non public call.-->
                <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
            </PropertyGroup>
        </When>

        <Otherwise>
            <ItemGroup>
                <Reference Include="$(ManagedFolder)\*.dll" Private="false"/>
                <Reference Remove="$(ManagedFolder)\netstandard.dll"/>
            </ItemGroup>
        </Otherwise>
    </Choose>

    <!-- Plugin Dependencies -->
    <ItemGroup>
        <!--example:-->
        <!--<Reference Include="$(PluginsFolder)\ModSettingsApi.dll" Private="false" />-->
    </ItemGroup>

    <!-- NuGet Packages -->
    <ItemGroup>
        <PackageReference Include="Microsoft.Unity.Analyzers" Version="1.14.0">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>

        <PackageReference Include="Microsoft.Build.Framework" Version="17.13.9">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>

        <PackageReference Include="Microsoft.Build.Utilities.Core" Version="17.13.9">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
    </ItemGroup>

    <!-- MSBuild Action-->
    <Target Name="CustomAfterBuild" AfterTargets="Build" Condition="$(CopyBuildToPluginFolder) != 'false'">
        <Message Text="Copying Output to Plugins Folder..." Importance="High"/>
        <Copy SourceFiles="$(OutputPath)\$(AssemblyName).dll"
              DestinationFolder="$(PluginsFolder)\$(InnerPluginFolder)"/>
        <Message Text="Output has copied to Plugins Folder!" Importance="High"/>
    </Target>
</Project>